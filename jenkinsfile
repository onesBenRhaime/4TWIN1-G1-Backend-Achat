pipeline {
    agent any

    environment {
        SNAP_REPO = 'DevOps_Project-1.0'
        RELEASE_REPO = 'MontassarBenouirane-4twin1-g1'
        NEXUS_IP = "192.168.33.10"
        NEXUS_PORT = "8081"
        NEXUS_LOGIN = "nexus"
        NEXUS_URL = "192.168.33.10:8081" 
        NEXUS_REPOSITORY = "MontassarBenouirane-4twin1-g1"
        NEXUS_USERNAME = "admin"
        NEXUS_PASSWORD = "nexus"
        ARTIFACT_PATH = "tn/esprit/DevOps_Project/1.0-SNAPSHOT/DevOps_Project-1.0-20240413.211744-2.jar"
        DOCKER_IMAGE_NAME = "13025486/montasserbenouirane-4twin-g1-achat"
        DOCKER_HUB_CREDENTIALS = 'docker'
        DOCKER_COMPOSE_VERSION = "1.29.2"
      }

    stages {
        stage('GIT Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Clean Compile') {
            steps {
                sh 'rm -rf target/*'
            }
        }

        stage('Build package') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Tests - JUnit/Mockito') {
             steps {
                 sh 'mvn test'
             }
        }

    //      stage("MVN SONARQUBE") {
    //       steps{
    //         script { 
    //             def scannerHome = tool 'scanner'
    //             withSonarQubeEnv {
    //                 sh "${scannerHome}/bin/sonar-scanner"
    //             }
    //         } 
    //     } 
    // }   

        stage('Package') {
            steps {
                sh 'mvn package'
            }
        }

        /*stage("UploadArtifact") {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: 'tn.esprit',
                    version: "1.0-SNAPSHOT",
                    repository: 'MontassarBenouirane-4twin1-g1',
                    credentialsId: 'nexus',
                    artifacts: [
                        [
                            artifactId: 'DevOps_Project',
                            classifier: '',
                            file: 'target/DevOps_Project-1.0.jar',
                            type: 'jar'
                        ]
                    ]
                )
            }
        }*/

       stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile
                    docker.build("${DOCKER_IMAGE_NAME}", "--build-arg NEXUS_URL=${NEXUS_URL} \
                        --build-arg NEXUS_REPOSITORY=${NEXUS_REPOSITORY} \
                        --build-arg NEXUS_USERNAME=${NEXUS_USERNAME} \
                        --build-arg NEXUS_PASSWORD=${NEXUS_PASSWORD} \
                        --build-arg ARTIFACT_PATH=${ARTIFACT_PATH} .")
                }
            }
        } 


        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS}") {
                        docker.image("${DOCKER_IMAGE_NAME}").push()
                    }
                }
            }
        }

    stage('Run Docker Compose') {
        steps {
          script {
            // Perform Docker login
            sh 'docker login -u 13025486 -p Montapatron55'

            // Pull the Docker image
            sh 'docker pull 13025486/montasserbenouirane-4twin-g1-achat'

            // Run Docker Compose
            sh 'docker compose up -d'
         }
        }
    }
    stage('Prometheus Setup') {
        steps {
               sh 'docker compose up -d prometheus'
        }
    }

    stage('Grafana Setup') {
            steps {
                sh 'docker compose up -d grafana'
            }
    }

      stage('Email Notification') {
          steps{
              mail bcc: '', body: ''' Stage: GIT Pull
              - Pulling from Git...
              Stage: Maven Clean Compile
              - Building Spring project...

              Stage: Test - JUNIT/MOCKITO
              - Testing Spring project...

              Stage: SonarQube Analysis
              - Running Sonarqube analysis...

              Stage: Deploy to Nexus
              - Deploying to Nexus...

              Stage: Build Docker Image
              - Building Docker image for the application...

              Stage: Push Docker Image
              - Pushing Docker image to Docker Hub...

              Stage: Docker Compose
              - Running Docker Compose...

              Stage: Monitoring Services G/P
              - Starting Prometheus and Grafana...

              Final Report: The pipeline has completed successfully. No action required ''', cc: '', from: '', replyTo: '', subject: 'Succ√®s de la pipeline DevOps Project  4TWIN-G1-BACKEND-ACHAT', to: 'montasser.benouirane@esprit.tn' 
          }
      }



    }
 

    post {
        success {
            echo 'Build successful! Deploying...'

        }
        failure {
            echo 'Build failed! Sending notification...'

        }
    }
}
