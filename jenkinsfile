pipeline {
    agent any
    environment {
            SNAP_REPO = 'DevOps_Project-1.0'
            RELEASE_REPO = '4TWIN1-G1-Achat'
            NEXUS_IP = "192.168.33.10"
            NEXUS_PORT = "8081"
            NEXUS_LOGIN = "nexus"
            NEXUS_URL = "192.168.33.10:8081" // Correction de l'URL Nexus
            NEXUS_REPOSITORY = "4TWIN1-G1-Achat"
            NEXUS_USERNAME = "admin"
            NEXUS_PASSWORD = "nexus"
            ARTIFACT_PATH = "tn/esprit/DevOps_Project/1.0-SNAPSHOT/DevOps_Project-1.0-20240412.230309-1.jar"
            DOCKER_IMAGE_NAME = "eyamechergui/spring"
            DOCKER_HUB_CREDENTIALS = 'docker'
            DOCKER_COMPOSE_VERSION = "1.29.2"
        }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Clean') {
            steps {
                sh 'rm -rf target/*'
            }
        }

        stage('MAVEN BUILD') {
            steps {
                sh 'mvn clean compile'
            }
        }

      /* stage('MOCKITO') {
             steps {
                 sh 'mvn test'
             }
       }
        stage('SonarQube Analysis') {
                    steps {
                        script {
                            def scannerHome = tool 'sonar'
                            withSonarQubeEnv {
                                sh "${scannerHome}/bin/sonar-scanner"
                            }
                        }
                    }
                }*/
       stage('PACKAGE') {
          steps {
             sh 'mvn package'
          }
       }

       /*stage("UploadArtifact") {
                   steps {
                       nexusArtifactUploader(
                           nexusVersion: 'nexus3',
                           protocol: 'http',
                           nexusUrl: "${NEXUS_URL}",
                           groupId: 'tn.esprit',
                           version: "1.0-SNAPSHOT",
                           repository: '4TWIN1-G1-Achat',
                           credentialsId: 'nexus',
                           artifacts: [
                               [
                                   artifactId: 'DevOps_Project',
                                   classifier: '',
                                   file: 'target/DevOps_Project-1.0.jar',
                                   type: 'jar'
                               ]
                           ]
                       )
                   }
               }*/

                stage('Build Docker Image') {
                           steps {
                               script {
                                   // Build the Docker image using the Dockerfile
                                   docker.build("${DOCKER_IMAGE_NAME}", "--build-arg NEXUS_URL=${NEXUS_URL} \
                                       --build-arg NEXUS_REPOSITORY=${NEXUS_REPOSITORY} \
                                       --build-arg NEXUS_USERNAME=${NEXUS_USERNAME} \
                                       --build-arg NEXUS_PASSWORD=${NEXUS_PASSWORD} \
                                       --build-arg ARTIFACT_PATH=${ARTIFACT_PATH} .")
                               }
                           }
                       }

                       stage('Push Docker Image') {
                           steps {
                               script {
                                   docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS}") {
                                       docker.image("${DOCKER_IMAGE_NAME}").push()
                                   }
                               }
                           }
                       }

                       stage('Run Docker Compose') {
                           steps {
                               script {
                                   // Perform Docker login
                                   sh 'docker login -u eyamechergui -p dockerdocker1'

                                   // Pull the Docker image
                                   sh 'docker pull eyamechergui/spring'

                                   // Run Docker Compose
                                   sh 'docker compose up -d'
                               }
                           }
                       }

                       stage('Prometheus Setup') {
                           steps {
                               sh 'docker compose up -d prometheus'
                           }
                       }

                       stage('Grafana Setup') {
                           steps {
                               sh 'docker compose up -d grafana'
                           }
                       }




    }

     post {
            success {
                echo 'Build successful! Deploying...'

            }
            failure {
                echo 'Build failed! Sending notification...'

            }
        }
}
